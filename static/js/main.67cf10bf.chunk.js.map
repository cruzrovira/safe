{"version":3,"sources":["components/header.js","components/form.js","components/summary.js","components/helper.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyled","styled","h1","Header","title","FormStyled","form","Form","addSafe","useForm","register","handleSubmit","errors","year_init","Date","getFullYear","onSubmit","data","e","year","parseInt","target","reset","className","htmlFor","name","id","ref","required","defaultValue","value","disabled","brand","Array","fill","map","_","i","key","type","defaultChecked","plan","SummaryStyled","div","Summary","safe","total","percentBrand","percentPlan","base","differenceOfYear","toFixed","CardStyled","App","useState","setSafe","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAGA,IAAMA,EAAeC,IAAOC,GAAV,KAYHC,EAPA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OAAO,kBAACJ,EAAD,KAAeI,I,6uBCLxB,IAAMC,EAAaJ,IAAOK,KAAV,KAuHDC,EA/EF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACeC,cAAnCC,EADoB,EACpBA,SAAUC,EADU,EACVA,aAAcC,EADJ,EACIA,OAQ5BC,GAAY,IAAIC,MAAOC,cAE3B,OACE,kBAACV,EAAD,CAAYW,SAAUL,GATX,SAACM,EAAMC,GAClBD,EAAKE,KAAOC,SAASH,EAAKE,MAC1BX,EAAQS,GACRC,EAAEG,OAAOC,YAOP,yBAAKC,UAAU,gBACb,2BAAOC,QAAQ,SAAf,WACA,4BACEC,KAAK,QACLC,GAAG,QACHC,IAAKjB,EAAS,CAAEkB,UAAU,IAC1BC,aAAa,IAEb,4BAAQC,MAAM,GAAGC,UAAQ,GAAzB,sBAGA,4BAAQD,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAGDlB,EAAOoB,OAAS,uBAAGT,UAAU,SAAb,sBAEnB,yBAAKA,UAAU,gBACb,2BAAOC,QAAQ,QAAf,UAEA,4BACEC,KAAK,OACLC,GAAG,OACHG,aAAa,GACbF,IAAKjB,EAAS,CAAEkB,UAAU,KAE1B,4BAAQE,MAAM,GAAGC,UAAQ,GAAzB,qBAGCE,MAAM,IACJC,OACAC,KAAI,SAACC,EAAGC,GAAJ,OACH,4BAAQC,IAAKD,EAAGP,MAAOjB,EAAYwB,GAChCxB,EAAYwB,OAIpBzB,EAAOO,MAAQ,uBAAGI,UAAU,SAAb,qBAElB,yBAAKA,UAAU,gBACb,2BAAOC,QAAQ,IAAf,SACA,2BACEe,KAAK,QACLd,KAAK,OACLK,MAAM,QACNU,gBAAc,EACdb,IAAKjB,EAAS,CAAEkB,UAAU,MACzB,IARL,QAUE,2BACEW,KAAK,QACLd,KAAK,OACLK,MAAM,OACNH,IAAKjB,EAAS,CAAEkB,UAAU,MACzB,IAfL,OAiBGhB,EAAO6B,MAAQ,uBAAGlB,UAAU,SAAb,qBAElB,2BAAOgB,KAAK,SAAST,MAAM,W,6IChHjC,IAAMY,EAAgBzC,IAAO0C,IAAV,KAoCJC,EA3BC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXb,EAAsBa,EAAtBb,MAAOb,EAAe0B,EAAf1B,KAAMsB,EAASI,EAATJ,KAEfK,EADO,QCfe,SAACd,GAC3B,OAAQA,GACN,IAAK,WACH,MAAO,IACT,IAAK,SACH,MAAO,IACT,IAAK,OACH,MAAO,IDWFe,CAAaf,GAHX,ICFc,SAACS,GAC1B,OAAQA,GACN,IAAK,QACH,MAAO,GACT,IAAK,OACH,MAAO,IDCFO,CAAYP,GACnBQ,GCG4B,SAAC9B,GAE/B,OADgB,IAAIL,MAAOC,cACRI,EDLH+B,CAAiB/B,GACjC,OACE,kBAACuB,EAAD,KACE,sCACA,4BACE,sCAAYV,GACZ,qCAAWb,GACX,qCAAWsB,GACX,uCAAaK,EAAMK,QAAQ,O,0REvBnC,IAAMC,EAAanD,IAAO0C,IAAV,KA0BDU,MAdf,WAAgB,IAAD,EACSC,mBAAS,MADlB,mBACRT,EADQ,KACFU,EADE,KAKb,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,CAAQhD,MAAO,UACf,kBAAC,EAAD,CAAMI,QANM,SAACgD,GACfD,EAAQC,MAMLX,EAAO,kBAAC,EAAD,CAASA,KAAMA,IAAW,OCdpBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67cf10bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nconst HeaderStyled = styled.h1`\r\n  color: #0d47a1;\r\n  text-align: center;\r\n`;\r\n\r\nconst Header = ({ title }) => {\r\n  return <HeaderStyled>{title}</HeaderStyled>;\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport PropTypes from \"prop-types\";\r\nconst FormStyled = styled.form`\r\n  label {\r\n    display: block;\r\n  }\r\n  input,\r\n  select {\r\n    border-left: 1px solid #ccc;\r\n    border-top: 1px solid #ddd;\r\n    border-right: 1px solid #ccc;\r\n    border-bottom: 1px solid #ddd;\r\n  }\r\n  select {\r\n    width: 100%;\r\n    line-height: 3em;\r\n    outline: none;\r\n    appearance: none;\r\n    padding-left: 5px;\r\n  }\r\n  input[type=\"submit\"] {\r\n    line-height: 3em;\r\n    width: 6em;\r\n    background: #0d47a1;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n\r\n    outline: none;\r\n  }\r\n  .error {\r\n    color: red;\r\n    margin: 0;\r\n  }\r\n  input[type=\"submit\"]:active {\r\n    transform: scale(0.8);\r\n  }\r\n  .form-control {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nconst Form = ({ addSafe }) => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  const save = (data, e) => {\r\n    data.year = parseInt(data.year);\r\n    addSafe(data);\r\n    e.target.reset();\r\n  };\r\n\r\n  let year_init = new Date().getFullYear();\r\n\r\n  return (\r\n    <FormStyled onSubmit={handleSubmit(save)}>\r\n      <div className=\"form-control\">\r\n        <label htmlFor=\"brand\">Brand*:</label>\r\n        <select\r\n          name=\"brand\"\r\n          id=\"brand\"\r\n          ref={register({ required: true })}\r\n          defaultValue=\"\"\r\n        >\r\n          <option value=\"\" disabled>\r\n            ---Select Brand---\r\n          </option>\r\n          <option value=\"American\">American</option>\r\n          <option value=\"Europa\">Europa</option>\r\n          <option value=\"Asia\">Asia</option>\r\n        </select>\r\n\r\n        {errors.brand && <p className=\"error\">Brand is required</p>}\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <label htmlFor=\"year\">Year*:</label>\r\n\r\n        <select\r\n          name=\"year\"\r\n          id=\"year\"\r\n          defaultValue=\"\"\r\n          ref={register({ required: true })}\r\n        >\r\n          <option value=\"\" disabled>\r\n            ---Select Year---\r\n          </option>\r\n          {Array(11)\r\n            .fill()\r\n            .map((_, i) => (\r\n              <option key={i} value={year_init - i}>\r\n                {year_init - i}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        {errors.year && <p className=\"error\">Year is required</p>}\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <label htmlFor=\"\">Plan*</label>\r\n        <input\r\n          type=\"radio\"\r\n          name=\"plan\"\r\n          value=\"Basic\"\r\n          defaultChecked\r\n          ref={register({ required: true })}\r\n        />{\" \"}\r\n        Basic\r\n        <input\r\n          type=\"radio\"\r\n          name=\"plan\"\r\n          value=\"Full\"\r\n          ref={register({ required: true })}\r\n        />{\" \"}\r\n        Full\r\n        {errors.plan && <p className=\"error\">Plan is required</p>}\r\n      </div>\r\n      <input type=\"submit\" value=\"send\" />\r\n    </FormStyled>\r\n  );\r\n};\r\nForm.propTypes = {\r\n  addSafe: PropTypes.func.isRequired,\r\n};\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport { percentBrand, percentPlan, differenceOfYear } from \"./helper\";\r\nconst SummaryStyled = styled.div`\r\n  ul {\r\n    list-style: none;\r\n  }\r\n  h3 {\r\n    color: #0d47a1;\r\n  }\r\n`;\r\n\r\nconst Summary = ({ safe }) => {\r\n  let { brand, year, plan } = safe;\r\n  let base = 2000;\r\n  let total =\r\n    base +\r\n    base * percentBrand(brand) +\r\n    base * percentPlan(plan) +\r\n    base * 0.03 * differenceOfYear(year);\r\n  return (\r\n    <SummaryStyled>\r\n      <h3>Sumary</h3>\r\n      <ul>\r\n        <li>Brand: {brand}</li>\r\n        <li>Year: {year}</li>\r\n        <li>Plan: {plan}</li>\r\n        <li>Total: ${total.toFixed(2)}</li>\r\n      </ul>\r\n    </SummaryStyled>\r\n  );\r\n};\r\nSummary.propTypes = {\r\n  safe: PropTypes.shape({\r\n    brand: PropTypes.string.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    plan: PropTypes.string.isRequired,\r\n  }),\r\n};\r\nexport default Summary;\r\n","export const percentBrand = (brand) => {\r\n  switch (brand) {\r\n    case \"American\":\r\n      return 0.15;\r\n    case \"Europa\":\r\n      return 0.05;\r\n    case \"Asia\":\r\n      return 0.3;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport const percentPlan = (plan) => {\r\n  switch (plan) {\r\n    case \"Basic\":\r\n      return 0.2;\r\n    case \"Full\":\r\n      return 0.5;\r\n    default:\r\n      break;\r\n  }\r\n};\r\nexport const differenceOfYear = (year) => {\r\n  let year_init = new Date().getFullYear();\r\n  return year_init - year;\r\n};\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"./components/header\";\nimport Form from \"./components/form\";\nimport Summary from \"./components/summary\";\nconst CardStyled = styled.div`\n  background: #f1f1f1;\n  margin: auto;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  padding: 0px 10px 15px 10px;\n\n  @media screen and (min-width: 400px) {\n    width: 400px;\n  }\n`;\n\nfunction App() {\n  let [safe, setSafe] = useState(null);\n  const addSafe = (item) => {\n    setSafe(item);\n  };\n  return (\n    <CardStyled>\n      <Header title={\"Fade.\"} />\n      <Form addSafe={addSafe} />\n      {safe ? <Summary safe={safe} /> : null}\n    </CardStyled>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}